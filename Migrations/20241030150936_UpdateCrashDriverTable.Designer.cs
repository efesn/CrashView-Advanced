// <auto-generated />
using System;
using CrashViewAdvanced.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CrashViewAdvanced.Migrations
{
    [DbContext(typeof(CrashViewContext))]
    [Migration("20241030150936_UpdateCrashDriverTable")]
    partial class UpdateCrashDriverTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CrashViewAdvanced.Entities.Crash", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Crashes__3214EC07070FAE3F");

                    b.HasIndex("DriverId");

                    b.HasIndex("TeamId");

                    b.ToTable("Crashes");
                });

            modelBuilder.Entity("CrashViewAdvanced.Entities.CrashDriver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CrashId")
                        .HasColumnType("int");

                    b.Property<int?>("CrashId1")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CrashId");

                    b.HasIndex("CrashId1");

                    b.HasIndex("DriverId");

                    b.ToTable("CrashDriver");
                });

            modelBuilder.Entity("CrashViewAdvanced.Entities.CrashTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CrashId")
                        .HasColumnType("int");

                    b.Property<int?>("CrashId1")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CrashId");

                    b.HasIndex("CrashId1");

                    b.HasIndex("TeamId");

                    b.ToTable("CrashTeams");
                });

            modelBuilder.Entity("CrashViewAdvanced.Entities.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Drivers__3214EC072500903B");

                    b.HasIndex("TeamId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("CrashViewAdvanced.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Teams__3214EC076DA1E1FF");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("CrashViewAdvanced.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Users__3214EC0717955D3C");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CrashViewAdvanced.Entities.Crash", b =>
                {
                    b.HasOne("CrashViewAdvanced.Entities.Driver", "Driver")
                        .WithMany("Crashes")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Crashes__DriverI__3F466844");

                    b.HasOne("CrashViewAdvanced.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CrashViewAdvanced.Entities.CrashDriver", b =>
                {
                    b.HasOne("CrashViewAdvanced.Entities.Crash", "Crash")
                        .WithMany()
                        .HasForeignKey("CrashId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrashViewAdvanced.Entities.Crash", null)
                        .WithMany("CrashDrivers")
                        .HasForeignKey("CrashId1");

                    b.HasOne("CrashViewAdvanced.Entities.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crash");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("CrashViewAdvanced.Entities.CrashTeam", b =>
                {
                    b.HasOne("CrashViewAdvanced.Entities.Crash", "Crash")
                        .WithMany()
                        .HasForeignKey("CrashId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrashViewAdvanced.Entities.Crash", null)
                        .WithMany("CrashTeams")
                        .HasForeignKey("CrashId1");

                    b.HasOne("CrashViewAdvanced.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crash");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CrashViewAdvanced.Entities.Driver", b =>
                {
                    b.HasOne("CrashViewAdvanced.Entities.Team", "Team")
                        .WithMany("Drivers")
                        .HasForeignKey("TeamId")
                        .IsRequired()
                        .HasConstraintName("FK__Drivers__TeamId__3C69FB99");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CrashViewAdvanced.Entities.Crash", b =>
                {
                    b.Navigation("CrashDrivers");

                    b.Navigation("CrashTeams");
                });

            modelBuilder.Entity("CrashViewAdvanced.Entities.Driver", b =>
                {
                    b.Navigation("Crashes");
                });

            modelBuilder.Entity("CrashViewAdvanced.Entities.Team", b =>
                {
                    b.Navigation("Drivers");
                });
#pragma warning restore 612, 618
        }
    }
}
